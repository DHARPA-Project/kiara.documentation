name: "linux tests and documentation builds for 'kiara.documentation'"
# This workflow is triggered on pushes to the repository.
on: [push]

jobs:

  build-docs:
    name: build documentation
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python 3.9.1
        uses: actions/setup-python@v2
        with:
          python-version: 3.9.1
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/cache@v2
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-${{ hashFiles('setup.cfg') }}-${{ hashFiles('requirements.txt') }}
      - uses: actions/cache@v2
        with:
          key: ${{ github.ref }}
          path: .cache
      - run: git config --global user.email "markus@frkl.io"
      - run: git config --global user.name "Markus Binsteiner"
      - name: install git versions of the main requirements
        run: pip install --extra-index-url https://gitlab.com/api/v4/projects/25344049/packages/pypi/simple -r requirements.txt
      - name: install kiara.documentation
        run: pip install -U --pre  --extra-index-url https://gitlab.com/api/v4/projects/25344049/packages/pypi/simple --extra-index-url https://pypi.fury.io/dharpa/ .[all,dev_documentation]
      - name: install insiders version of mkdocs-material
        run: pip install --upgrade --force-reinstall "git+https://${{ secrets.MKDOCS_MATERIAL_PULL_TOKEN }}@github.com/DHARPA-Project/mkdocs-material-insiders.git"
      - name: create an entry in the data store (1)
        run: KIARA_DATA_STORE="/tmp/kiara/data_store_3/" kiara run file.import_from.local.file_path source=examples/data/journals/JournalEdges1902.csv --save value_item=example_table_source
      - name: create an entry in the data store (2)
        run: KIARA_DATA_STORE="/tmp/kiara/data_store_3/" kiara run file.convert_to.table value_item=value:example_table_source --save value_item=example_table
      - name: create latest documentation
        if: ${{ ( github.ref == 'refs/heads/develop') }}
        run: FAIL_DOC_BUILD_ON_ERROR=true mike deploy --push latest && mike set-default --push latest
      - name: extract tag name
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: create stable documentation
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: FAIL_DOC_BUILD_ON_ERROR=true mike deploy --push --update-alias --title "v ${RELEASE_VERSION}" "${RELEASE_VERSION}" stable
